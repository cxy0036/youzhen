C51 COMPILER V9.56.0.0   EEPROM                                                            05/22/2018 18:06:45 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\Objects\EEPROM.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE User\EEPROM.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\User;.\Option File) DEBU
                    -G OBJECTEXTEND PRINT(.\Listings\EEPROM.lst) TABS(2) OBJECT(.\Objects\EEPROM.obj)

line level    source

   1          /**
   2            ******************************************************************************
   3            * @file    EEPROM.c
   4            * @author  Captain.
   5            * @version V1.1.0
   6            * @date    2017-6-22
   7            * @brief   Implement 11LC010 UN/IO BUS EEPROM Read , Write ,command Functions.
   8             ******************************************************************************
   9            * @attention
  10            *
  11            * <h2><center>&copy; COPYRIGHT 2017 YUJIN</center></h2>
  12            *
  13            ******************************************************************************
  14            */
  15          
  16          /* Includes ------------------------------------------------------------------*/
  17          #include "EEPROM.h"
  18          #include "delay.h"
  19          #include "Flash_Control.h"
  20          
  21          /* Global variable -----------------------------------------------------------*/
  22          uint8_t EEPROM_ERROR_Flag = 0;  /* EEPROM Read, Write, Timeout Error Flag */
  23          uint8_t EEPROM_Error = 0;
  24          uint8_t EEPROM_Error_Count = 0;
  25          extern uint8_t EEPROM_Write_Number_Error;
  26          extern volatile uint32_t Flash_Times;
  27          extern uint8_t Lamp_Type; 
  28          extern uint8_t R_W_flag;
  29          /* Public functions ----------------------------------------------------------*/
  30          
  31          /*
  32          ********************************************************************************
  33          *                           EEPROM INITIALIZATION FUNCTIONS
  34          *
  35          * Description: This function Initial EEPROM IO PORT.
  36          *
  37          * Arguments  : none
  38          *
  39          * Note(s)    : none.
  40          ********************************************************************************
  41          */
  42          void EEPROM_IO(void)
  43          {
  44   1        P07 = 1;
  45   1        //P0OC |= 0x04;
  46   1        P0UR &= ~0x80;  //disable pull up;
  47   1        P0M |= 0x80; //P07 output mode; 
  48   1      }
  49          
  50          /*
  51          ********************************************************************************
  52          *                           EEPROM MAK FUNCTIONS
  53          *
  54          * Description: This function implement EEPROM Master Ask Function.
C51 COMPILER V9.56.0.0   EEPROM                                                            05/22/2018 18:06:45 PAGE 2   

  55          *
  56          * Arguments  : none
  57          *
  58          * Note(s)    : none.
  59          ********************************************************************************
  60          */
  61          
  62          void EEPROM_MAK(void)                    
  63          { 
  64   1        SET_IO_LOW(EEPROM_UNIO_PIN);        /* SCIO Output 0*/
  65   1        //Delay_N_5us(6);
  66   1        Delay_Hfbit();
  67   1        SET_IO_HIGH(EEPROM_UNIO_PIN);        /* SCIO Output 1*/
  68   1        //Delay_N_5us(6);
  69   1        Delay_Hfbit();
  70   1      }
  71          
  72          /*
  73          ********************************************************************************
  74          *                           EEPROM NoMAK FUNCTIONS
  75          *
  76          * Description: This function implement EEPROM NoMAK Function.
  77          *
  78          * Arguments  : none
  79          *
  80          * Note(s)    : none.
  81          ********************************************************************************
  82          */
  83          
  84          void EEPROM_NoMAK(void)                  
  85          { 
  86   1        SET_IO_HIGH(EEPROM_UNIO_PIN);        /* SCIO Output 1*/
  87   1        //Delay_N_5us(6);
  88   1        Delay_Hfbit();
  89   1        SET_IO_LOW(EEPROM_UNIO_PIN);        /* SCIO Output 0*/
  90   1        //Delay_N_5us(6);
  91   1        Delay_Hfbit();
  92   1      }
  93          
  94          /*
  95          ********************************************************************************
  96          *                           EEPROM SAK FUNCTIONS
  97          *
  98          * Description: This function implement EEPROM Slave Ask Function.
  99          *
 100          * Arguments  : none
 101          *
 102          * Note(s)    : If ask timeout, Than set EEPROM Error Flag.
 103          ********************************************************************************
 104          */
 105          void EEPROM_SAK(void)
 106          { 
 107   1        uint8_t timeout = EEPROM_WAIT;
 108   1        P07 = 1;
 109   1        P0M &= ~0x80; //P07 Input mode;
 110   1        while(EEPROM_UNIO_PIN)
 111   1        {
 112   2          timeout--;
 113   2          if(timeout == 0)
 114   2          {
 115   3            //EEPROM_ERROR("SAK Time OUT HI!! errorcode=%d \n",0);
 116   3            EEPROM_ERROR_Flag = 1;
C51 COMPILER V9.56.0.0   EEPROM                                                            05/22/2018 18:06:45 PAGE 3   

 117   3            P0M |= 0x80;
 118   3            return ;      
 119   3          }else{
 120   3            EEPROM_ERROR_Flag = 0;
 121   3          }
 122   2        }
 123   1        //Delay_N_10us(6);  //60us
 124   1        Delay_Hfbit();
 125   1        Delay_Hfbit();
 126   1        if(EEPROM_UNIO_PIN == 0)
 127   1        {
 128   2          EEPROM_ERROR_Flag = 2;
 129   2          P0M |= 0x80;
 130   2          return ;
 131   2        }else{
 132   2          EEPROM_ERROR_Flag = 0;    
 133   2          //SET_IO_HIGH(EEPROM_UNIO_PIN);
 134   2          //P13 = 1;
 135   2          P0M |= 0x80; //P07 output mode;
 136   2        }
 137   1      }
 138          
 139          /*
 140          ********************************************************************************
 141          *                           EEPROM NoSAK FUNCTIONS
 142          *
 143          * Description: This function implement EEPROM NoSAK Function.
 144          *
 145          * Arguments  : none
 146          *
 147          * Note(s)    : If NoAsk timeout, Than set EEPROM Error Flag..
 148          ********************************************************************************
 149          */
 150          void EEPROM_NoSAK(void)
 151          { 
 152   1        uint16_t timeout = EEPROM_WAIT;
 153   1        P07 = 1;
 154   1        P0M &= ~0x80; //P07 Input mode;
 155   1        while(!(EEPROM_UNIO_PIN))        /* if SCIO is 0 */
 156   1        {
 157   2          timeout--;
 158   2          if(timeout == 0)
 159   2          {
 160   3            EEPROM_ERROR_Flag = 3;
 161   3            P0M |= 0x80;
 162   3            return  ;
 163   3          }else{
 164   3            EEPROM_ERROR_Flag = 0;
 165   3          }
 166   2        }
 167   1        //Delay_N_10us(6); //60us
 168   1        Delay_Hfbit();
 169   1        Delay_Hfbit();
 170   1        if(EEPROM_UNIO_PIN == 0)
 171   1        {
 172   2          EEPROM_ERROR_Flag = 4;
 173   2          return  ;
 174   2        }else{
 175   2          EEPROM_ERROR_Flag = 0;
 176   2          P0M |= 0x80;
 177   2        }
 178   1        //P13 = 1;
C51 COMPILER V9.56.0.0   EEPROM                                                            05/22/2018 18:06:45 PAGE 4   

 179   1        //P2M |= 0x01; //P20 output mode;
 180   1        //SET_IO_DIR_OUT(EEPORM_UNIO_PORT,EEPROM_UNIO_PIN);     /* change direction Output */
 181   1      }
 182          
 183          /*
 184          ********************************************************************************
 185          *                        WRITE ONE BYTE TO EEPROM FUNCTIONS
 186          *
 187          * Description: This function implement write one byte to EEPROM Timing Function,
 188          * Is called by all need write Data functions.
 189          *
 190          * Arguments  : Write Data, one Byte
 191          *
 192          * Note(s)    : none.
 193          ********************************************************************************
 194          */
 195          void EEPROM_Write_Byte(uint8_t write_data)
 196          {
 197   1        uint8_t t = 0x80;
 198   1        while(t)
 199   1        {
 200   2          if(write_data & t)
 201   2          {
 202   3            SET_IO_LOW(EEPROM_UNIO_PIN);
 203   3            //Delay_N_5us(6);
 204   3            Delay_Hfbit();
 205   3            SET_IO_HIGH(EEPROM_UNIO_PIN);
 206   3            Delay_Hfbit();
 207   3            //Delay_N_5us(6);
 208   3          }else{
 209   3            SET_IO_HIGH(EEPROM_UNIO_PIN);
 210   3            //Delay_N_5us(6);
 211   3            Delay_Hfbit();
 212   3            SET_IO_LOW(EEPROM_UNIO_PIN);
 213   3            //Delay_N_5us(6);
 214   3            Delay_Hfbit();
 215   3          }
 216   2          t = t >> 1;
 217   2        }  
 218   1      }
 219          
 220          /*
 221          ********************************************************************************
 222          *                        READ ONE BYTE FROM EEPROM FUNCTIONS
 223          *
 224          * Description: This function implement read one byte from EEPROM Function,
 225          * Is called by read Data functions.
 226          *
 227          * Arguments  : none.
 228          *
 229          * Return : Read Data, One byte.
 230          *
 231          * Note(s)    : If read timeout, Than set EEPROM ERROR Flag.
 232          ********************************************************************************
 233          */
 234          uint8_t EEPROM_Read_Byte(void)
 235          {
 236   1        uint8_t t = 0x80;
 237   1        uint8_t readtmp = 0;
 238   1        P07 = 1;
 239   1        P0M &= ~0x80; //P20 Input mode;
 240   1        while(t)
C51 COMPILER V9.56.0.0   EEPROM                                                            05/22/2018 18:06:45 PAGE 5   

 241   1        {
 242   2          Delay_Qbit2();
 243   2          if(EEPROM_UNIO_PIN == 0)
 244   2          {
 245   3            Delay_Hfbit();
 246   3            if(EEPROM_UNIO_PIN == 0)
 247   3            {
 248   4              EEPROM_ERROR_Flag = 5;
 249   4              P0M |= 0x80;
 250   4              return 0;
 251   4            }else{
 252   4              EEPROM_ERROR_Flag = 0;
 253   4              readtmp |= t;
 254   4            }
 255   3          }else{
 256   3              Delay_Hfbit();
 257   3              if(EEPROM_UNIO_PIN == 1)
 258   3              {
 259   4                EEPROM_ERROR_Flag = 6;
 260   4                P0M |= 0x80;
 261   4                return 0;
 262   4              }else{
 263   4                EEPROM_ERROR_Flag = 0;
 264   4                readtmp &= ~t;
 265   4              }
 266   3          }
 267   2          Delay_Qbit();
 268   2          t = t >> 1;
 269   2        }
 270   1        //P13 = 1;
 271   1        P0M |= 0x80; //P20 Output mode;
 272   1        return readtmp;
 273   1      }
 274          
 275          /*
 276          ********************************************************************************
 277          *                        EEPROM  STAERT HEADER FUNCTIONS
 278          *
 279          * Description: This function implement EEPROM start header Function,
 280          * Is called all EERPOM operation.
 281          *
 282          * Arguments  : none.
 283          *
 284          * Return : none.
 285          *
 286          * Note(s)    : If timeout, Than set EEPROM ERROR Flag.
 287          ********************************************************************************
 288          */
 289          
 290          void EEPROM_StartHeader(void)
 291          {
 292   1        SET_IO_LOW(EEPROM_UNIO_PIN);
 293   1        Delay_N_5us(4);
 294   1        SET_IO_HIGH(EEPROM_UNIO_PIN);
 295   1        Delay_N_10us(80);
 296   1        SET_IO_LOW(EEPROM_UNIO_PIN);
 297   1        Delay_N_5us(4);
 298   1        EEPROM_Write_Byte(EEPROM_STARTHEADER);
 299   1        EEPROM_MAK();
 300   1        EEPROM_NoSAK();
 301   1      }
 302          
C51 COMPILER V9.56.0.0   EEPROM                                                            05/22/2018 18:06:45 PAGE 6   

 303          
 304          
 305          
 306          /*
 307          ********************************************************************************
 308          *                        EEPROM WRITE DATA FUNCTIONS
 309          *
 310          * Description: EEPROM_Write_Data Function.
 311          * Wirte N Data to EEPROM address.
 312          *
 313          * Arguments  : Data address, EEPROM detination address, Number of Data.
 314          *
 315          * Return : none.
 316          *
 317          * Note(s)    : If timeout, Than set EEPROM ERROR Flag.
 318          ********************************************************************************
 319          */
 320          
 321          void EEPROM_Write_Data(uint8_t *data_arry, uint16_t write_addr, uint8_t write_num)
 322          {
 323   1        uint8_t i,write_addr_tmpH,write_addr_tmpL;
 324   1        
 325   1        write_addr_tmpH = (write_addr >> 8) & 0xFF;
 326   1        write_addr_tmpL = write_addr & 0xFF;
 327   1        EEPROM_Write_CMD(CMD_WREN);
 328   1        EEPROM_StartHeader();
 329   1        EEPROM_Write_Byte(EEPROM_DEVICE_ADDR);
 330   1        EEPROM_MAK();
 331   1        EEPROM_SAK();
 332   1        EEPROM_Write_Byte(CMD_WRITE);
 333   1        EEPROM_MAK();
 334   1        EEPROM_SAK();
 335   1        EEPROM_Write_Byte(write_addr_tmpH);
 336   1        EEPROM_MAK();
 337   1        EEPROM_SAK(); 
 338   1        EEPROM_Write_Byte(write_addr_tmpL);
 339   1        EEPROM_MAK();
 340   1        EEPROM_SAK();
 341   1        
 342   1        for(i=0;i<write_num;i++)
 343   1        {
 344   2          EEPROM_Write_Byte(data_arry[i]);
 345   2          if(i == (write_num - 1))
 346   2          {
 347   3            EEPROM_NoMAK();
 348   3          }else{
 349   3            EEPROM_MAK();
 350   3          }
 351   2          EEPROM_SAK();
 352   2        }
 353   1        Delay_ms(20);
 354   1      }
 355          
 356          /*
 357          ********************************************************************************
 358          *                        EEPROM WRITE COMMAND FUNCTIONS
 359          *
 360          * Description: EEPROM_Write_CMD Function.
 361          *
 362          * Arguments  : Command.
 363          *
 364          * Return : none.
C51 COMPILER V9.56.0.0   EEPROM                                                            05/22/2018 18:06:45 PAGE 7   

 365          *
 366          * Note(s)    : If timeout, Than set EEPROM ERROR Flag.
 367          ********************************************************************************
 368          */
 369          void EEPROM_Write_CMD(uint8_t cmd)
 370          {
 371   1        EEPROM_StartHeader();
 372   1        EEPROM_Write_Byte(EEPROM_DEVICE_ADDR);
 373   1        EEPROM_MAK();
 374   1        EEPROM_SAK();
 375   1        EEPROM_Write_Byte(cmd);
 376   1        EEPROM_NoMAK();
 377   1        EEPROM_SAK();
 378   1        if((cmd == CMD_ERAL) || (cmd == CMD_SETAL))
 379   1        {
 380   2          Delay_ms(20);
 381   2        }
 382   1      }
 383          
 384          
 385          /*
 386          ********************************************************************************
 387          *                        READ NUMBER FROM EEPROM FUNCTIONS
 388          *
 389          * Description: Read a 32 Bit(0-4294967295) number from EEPROM, Is use to read flash 
 390          * times from EEPORM.
 391          *
 392          * Arguments  : none.
 393          *
 394          * Return : Read Number Data.
 395          *
 396          * Note(s)    : If timeout, Than set EEPROM ERROR Flag.
 397          *              If you want change the write address in EEPROM, You can change 
 398          *              the macro DATA_ADDR in EEPROM.h.
 399          ********************************************************************************
 400          */
 401          
 402          void Write_Num_TO_EEPROM(uint32_t flash_count)
 403          {
 404   1        uint8_t dataHH,dataHL,dataLH,dataLL,data_arry[4];
 405   1        dataHH = (uint8_t)(flash_count >> 24);  /* 32 bit unmerge two 8 bit ddata */
 406   1        dataHL = (uint8_t)(flash_count >> 16);
 407   1        dataLH = (uint8_t)(flash_count >> 8);
 408   1        dataLL = (uint8_t)(flash_count);
 409   1        data_arry[0] = dataLL;
 410   1        data_arry[1] = dataLH;
 411   1        data_arry[2] = dataHL;
 412   1        //data_arry[3] = dataHH;
 413   1        data_arry[3] = Lamp_Type;
 414   1        R_W_flag = 1;
 415   1        EEPROM_Write_Data(data_arry,DATA_ADDR,4);  /* write data to DATA_ADDR in EEPROM */
 416   1        EEPROM_Write_CMD(CMD_WRDI);  /* Disable write, protect EEPROM Data*/
 417   1        
 418   1      }
 419          
 420          uint32_t Read_Num_From_EEPROM(void)
 421          {
 422   1        uint8_t read_arry[4];
 423   1        uint32_t read_data;
 424   1        R_W_flag = 0;
 425   1        EEPROM_StartHeader();
 426   1        EEPROM_Write_Byte(EEPROM_DEVICE_ADDR);
C51 COMPILER V9.56.0.0   EEPROM                                                            05/22/2018 18:06:45 PAGE 8   

 427   1        EEPROM_MAK();
 428   1        EEPROM_SAK();
 429   1        EEPROM_Write_Byte(CMD_READ);
 430   1        EEPROM_MAK();
 431   1        EEPROM_SAK();
 432   1        EEPROM_Write_Byte(DATA_ADDR_H);
 433   1        EEPROM_MAK();
 434   1        EEPROM_SAK(); 
 435   1        EEPROM_Write_Byte(DATA_ADDR_L);
 436   1        EEPROM_MAK();
 437   1        EEPROM_SAK();
 438   1        read_arry[0] = EEPROM_Read_Byte();
 439   1        EEPROM_MAK();
 440   1        EEPROM_SAK();
 441   1        read_arry[1] = EEPROM_Read_Byte();
 442   1        EEPROM_MAK();
 443   1        EEPROM_SAK();
 444   1        read_arry[2] = EEPROM_Read_Byte();
 445   1        EEPROM_MAK();
 446   1        EEPROM_SAK();
 447   1        read_arry[3] = EEPROM_Read_Byte();
 448   1        EEPROM_NoMAK();
 449   1        EEPROM_SAK();
 450   1        
 451   1        //EEPROM_Read_Data(read_arry,DATA_ADDR,4);  /* read two data from DATA_ADDR in EEPORM */
 452   1        //read_data = read_arry[3];  /* Two 8 bit data merge one 32 bit data */
 453   1        Lamp_Type = read_arry[3] ;
 454   1        read_arry[3] = 0x00;
 455   1        read_data = ((uint32_t)read_arry[3] << 24) | ((uint32_t)read_arry[2] << 16) | \
 456   1                    ((uint32_t)read_arry[1] << 8) | (uint32_t)read_arry[0];
 457   1                    
 458   1        return read_data;  /* return read data */
 459   1      }
 460          
 461          void EEPROM_Write_Check(void)
 462          { 
 463   1        if(EEPROM_Write_Number_Error)
 464   1        {   
 465   2      
 466   2          Write_Num_TO_EEPROM(Flash_Times);   
 467   2          if(Flash_Times == Read_Num_From_EEPROM())
 468   2          {
 469   3            EEPROM_Write_Number_Error = 0;
 470   3            EEPROM_Error_Count = 0;
 471   3            EEPROM_Error = 0;
 472   3          }else{
 473   3            EEPROM_Error_Count++;
 474   3            if(EEPROM_Error_Count == 20)
 475   3            {
 476   4              EEPROM_Error_Count = 0;
 477   4              EEPROM_Error = 1;
 478   4            }
 479   3          }
 480   2          
 481   2        } 
 482   1      }
 483          
 484          
 485          /************************ (C) COPYRIGHT YUJIN *****END OF FILE*****************/


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.56.0.0   EEPROM                                                            05/22/2018 18:06:45 PAGE 9   

   CODE SIZE        =    772    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3      27
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
