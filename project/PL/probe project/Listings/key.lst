C51 COMPILER V9.56.0.0   KEY                                                               05/30/2018 09:20:49 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN .\Objects\key.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE User\key.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\User;.\Option File) DEBUG O
                    -BJECTEXTEND PRINT(.\Listings\key.lst) TABS(2) OBJECT(.\Objects\key.obj)

line level    source

   1          #include "key.h"
   2          #include "Flash_Control.h"
   3          #include "Error_Check.h"
   4          #include "skin_color_check.h"
   5          #include "protocol.h"
   6          #include "UART.h"
   7          #include "delay.h"
   8          
   9          volatile uint8_t Key_Read = 0;
  10          uint8_t Key_Trig = 0;
  11          uint8_t Key_Count = 0;
  12          uint8_t No_Skin_Flag = 0;
  13          uint8_t Standard_Flash_Lock = 0;
  14          uint8_t  Flash_Key_Push = 0;
  15          //uint16_t Key_Delay_Count = 0;
  16          //uint16_t Flash_Key_Delay_Count = 0;
  17          
  18          uint8_t Key_Push = 0;
  19          uint8_t Skin_Tpye5_Count = 0;
  20          uint8_t Full_Charge_Flag = 0;
  21          uint8_t Low_Lamp;
  22          uint8_t First_Push = 1;
  23          uint8_t Flash_Flag = 0;
  24          uint16_t Flash_Delay_Count = 0;
  25          //uint8_t Skin_Tpye5_Count;
  26          //uint8_t Mode_Change = 0;
  27          
  28          uint8_t Mode_Type = Standard_Mode;
  29          extern uint8_t Flash_Level;
  30          extern uint8_t Flash_Times_Level;
  31          extern uint8_t Low_Lamp ;
  32          extern uint8_t Skin_Tpye;
  33          
  34          extern uint8_t Lock_Flag;
  35          extern uint8_t Error_Flag;
  36          //extern uint8_t Get_Mode_Type;
  37          extern uint8_t Flash_Ready;
  38          
  39          
  40          void Key_IO_Init(void)
  41          {
  42   1        P1M &= ~0x01;   /* P10:Touch Input */ 
  43   1        P0M &= ~0x01;   /* P00:Flash SW Input */
  44   1        P1UR &= ~0x01;   /* P10:Disable Pull up */
  45   1        P0UR |= 0x01;   /* P00:enable Pull up */
  46   1      }
  47          
  48          
  49          void Key_Scan(void)
  50          {
  51   1        uint8_t temp;
  52   1        temp = P1 << 1;
  53   1        Key_Read = ((P0 & 0x01) | (temp & 0x02)) ^ 0xFF;  /* not */
  54   1        Key_Trig = Key_Read & (Key_Read ^ Key_Count);
C51 COMPILER V9.56.0.0   KEY                                                               05/30/2018 09:20:49 PAGE 2   

  55   1        Key_Count = Key_Read;
  56   1      }
  57          
  58          
  59          void Key_Process(void)
  60          {
  61   1        if(!Lock_Flag)
  62   1        {
  63   2          Key_Scan();//
  64   2          if(((!((~P1)&0x01))&&(Full_Charge_Flag)&&(Skin_Tpye == 5))||((Skin_Tpye == 3)&&(Flash_Level == 9))||((Sk
             -in_Tpye == 4)&&(Flash_Level == 9)))//在满电下有触摸，颜色感应不为1/0时闪烁
  65   2            {
  66   3                Skin_Tpye5_Count++;
  67   3                if(Skin_Tpye5_Count == 150)
  68   3                {
  69   4                  //Full_Charge_LED_TOG;
  70   4                  Skin_Tpye5_Count = 0;
  71   4                  No_Skin_Flag ^= 1;
  72   4                  //Delay_ms(200);
  73   4                }
  74   3            }else{
  75   3              No_Skin_Flag = 1;
  76   3            }
  77   2          if(((~Key_Count) & TOUCH_PIN)&&(!Flash_Key_Push))
  78   2          {
  79   3            Skin_Color_Check();
  80   3            if(Key_Count & FLASH_SW_PIN)
  81   3            {
  82   4              if(Key_Trig & FLASH_SW_PIN)
  83   4              {
  84   5                Flash_Key_Push = 1;
  85   5                Standard_Flash_Lock = 1;
  86   5              }
  87   4            }
  88   3          }else{
  89   3            if((~Key_Count) & TOUCH_PIN)  
  90   3            {
  91   4              Skin_Color_Check(); 
  92   4            }
  93   3            else{
  94   4              Skin_Tpye = 0;
  95   4            }       
  96   3            if(!(Key_Count & FLASH_SW_PIN))
  97   3            {
  98   4              Standard_Flash_Lock = 0;
  99   4              Flash_Key_Push = 0;
 100   4            }
 101   3          }
 102   2          
 103   2        
 104   2          if(Full_Charge_Flag && (!(Error_Flag)) && (!(Low_Lamp)) && (!(Skin_Tpye == 0))&& (!(Skin_Tpye == 5)))
 105   2            //if(Full_Charge_Flag && (!(Error_Flag)) && (!(Low_Lamp)))
 106   2          {   
 107   3            switch(Mode_Type){
 108   4            //case Auto_Mode : Auto_Flash() ;break;
 109   4            case Auto_Mode : Auto_Com(1) ;break;
 110   4            case Auto_Multi_Mode :Auto_Com(4);break;
 111   4            //case Auto_Multi_Mode : Auto_Multi_Flash();break;
 112   4            case Standard_Mode : Standard_Flash();break;
 113   4            case Standard_Multi_Mode : Standard_Multi_Flash();break;
 114   4            default : break;       
 115   4            }
C51 COMPILER V9.56.0.0   KEY                                                               05/30/2018 09:20:49 PAGE 3   

 116   3          }
 117   2        }
 118   1      }
 119          
 120          void Auto_Com(uint8_t plustimes)
 121          {
 122   1        uint16_t delay_count;
 123   1        if((~Key_Count) & TOUCH_PIN)
 124   1        {
 125   2          if(First_Push)
 126   2          {
 127   3            delay_count = 600;      
 128   3          }else{
 129   3            delay_count = 600;
 130   3          }
 131   2          Flash_Delay_Count ++;
 132   2          if(Flash_Delay_Count == delay_count)
 133   2          {     
 134   3            Flash_Delay_Count = delay_count - 1;
 135   3            Flash_Flag = 1;
 136   3            if(Flash_Ready)
 137   3            {
 138   4              First_Push = 0;
 139   4              Flash_Ready = 0;
 140   4              Flash_Flag = 0;
 141   4              Full_Charge_Flag = 0;
 142   4              Flash_Delay_Count = 0;
 143   4              Full_Charge_LED_Off;
 144   4              Flash_Control(plustimes);                   
 145   4            }     
 146   3          }  
 147   2        }else{
 148   2          Flash_Ready = 0;
 149   2          Flash_Flag = 0;
 150   2          Skin_Tpye = 0;
 151   2          First_Push = 1;
 152   2          Flash_Delay_Count = 0;
 153   2        }
 154   1      }
 155           
 156          /*
 157          void Auto_Flash(void)
 158          {
 159            uint16_t delay_count;
 160            if(Key_Count & TOUCH_PIN)
 161            {
 162              if(First_Push)
 163              {
 164                delay_count = 600;      
 165              }else{
 166                delay_count = 600;
 167              }
 168              Flash_Delay_Count ++;
 169              if(Flash_Delay_Count == delay_count)
 170              {     
 171                Flash_Delay_Count = delay_count - 1;
 172                Flash_Flag = 1;
 173                if(Flash_Ready)
 174                {
 175                  First_Push = 0;
 176                  Flash_Ready = 0;
 177                  Flash_Flag = 0;
C51 COMPILER V9.56.0.0   KEY                                                               05/30/2018 09:20:49 PAGE 4   

 178                  Full_Charge_Flag = 0;
 179                  Flash_Delay_Count = 0;
 180                  Full_Charge_LED_Off;
 181                  Flash_Control(1);                   
 182                }     
 183              }  
 184            }else{
 185              Flash_Ready = 0;
 186              Flash_Flag = 0;
 187              Skin_Tpye = 0;
 188              First_Push = 1;
 189              Flash_Delay_Count = 0;
 190            }
 191          }
 192           
 193          
 194          void Auto_Multi_Flash(void)
 195          {
 196            
 197            uint16_t delay_count;
 198            if(Key_Count & TOUCH_PIN)
 199            {
 200              if(First_Push)
 201              {
 202                delay_count = 600;      
 203              }else{
 204                delay_count = 600;
 205              }
 206              Flash_Delay_Count ++;
 207              if(Flash_Delay_Count == delay_count)
 208              {     
 209                Flash_Delay_Count = delay_count - 1;    
 210                Flash_Flag = 1;
 211                if(Flash_Ready)
 212                {
 213                  First_Push = 0;
 214                  Flash_Ready = 0;
 215                  Flash_Flag = 0;
 216                  Full_Charge_Flag = 0;
 217                  Flash_Delay_Count = 0;
 218                  Full_Charge_LED_Off;
 219                  Flash_Control(4);   
 220                }
 221              }
 222            }else{
 223              Flash_Ready = 0;
 224              Flash_Flag = 0;
 225              Skin_Tpye = 0;
 226              First_Push = 1;
 227              Flash_Delay_Count = 0;
 228            }
 229          }
 230          */
 231          void Standard_Flash(void)
 232          {
 233   1        if(Standard_Flash_Lock)
 234   1        {
 235   2          Flash_Flag = 1;
 236   2          if(Flash_Ready)
 237   2          {
 238   3            Standard_Flash_Lock = 0;
 239   3            Flash_Ready = 0;
C51 COMPILER V9.56.0.0   KEY                                                               05/30/2018 09:20:49 PAGE 5   

 240   3            Flash_Flag = 0;
 241   3            Full_Charge_Flag = 0;
 242   3            Full_Charge_LED_Off;
 243   3            Flash_Control(1);         
 244   3          }
 245   2        }
 246   1      }
 247          
 248          
 249          void Standard_Multi_Flash(void)
 250          {
 251   1        if(Standard_Flash_Lock)
 252   1        {
 253   2          Flash_Flag = 1;
 254   2          if(Flash_Ready)
 255   2          {
 256   3            Standard_Flash_Lock = 0;
 257   3            Flash_Ready = 0;
 258   3            Flash_Flag = 0;
 259   3            Full_Charge_Flag = 0;
 260   3            Full_Charge_LED_Off;
 261   3            Flash_Control(4);                   
 262   3          }
 263   2        }
 264   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    365    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     15       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
