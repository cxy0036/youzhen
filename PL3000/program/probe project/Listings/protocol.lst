C51 COMPILER V9.56.0.0   PROTOCOL                                                          05/03/2018 16:42:45 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE PROTOCOL
OBJECT MODULE PLACED IN .\Objects\protocol.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE User\protocol.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\User;.\Option File) DE
                    -BUG OBJECTEXTEND PRINT(.\Listings\protocol.lst) TABS(2) OBJECT(.\Objects\protocol.obj)

line level    source

   1          #include "protocol.h"
   2          #include "UART.h"
   3          #include "delay.h"
   4          #include "Error_Check.h"
   5          #include "Flash_Control.h"
   6          #include "skin_color_check.h"
   7          #include "key.h"
   8          #include "ADC.h"
   9          
  10          uint8_t Analysis_Lock = 0;
  11          uint8_t Flash_Times_Level = 0;
  12          uint8_t Lock_Flag = 1;
  13          //uint8_t Get_Mode_Type = 1;
  14          uint8_t Flash_Ready = 0;
  15          
  16          extern uint8_t No_Skin_Flag;
  17          extern uint8_t Mode_Type;
  18          extern uint8_t Key_Count;
  19          extern volatile uint32_t Flash_Times;
  20          extern uint8_t Error_Flag;
  21          extern uint8_t Full_Charge_Flag;
  22          extern uint8_t Flash_Level;
  23          extern uint8_t Lamp_Type;
  24          extern uint8_t Skin_Tpye;
  25          extern uint8_t Flash_Flag;
  26          extern uint8_t Mode_Change;
  27          extern uint8_t Low_Lamp;
  28          extern uint16_t readdata;
  29          
  30          static const uint8_t code CRC_Table[256]={
  31              0x00,0x31,0x62,0x53,0xc4,0xf5,0xa6,0x97,0xb9,0x88,0xdb,0xea,0x7d,0x4c,0x1f,0x2e,
  32              0x43,0x72,0x21,0x10,0x87,0xb6,0xe5,0xd4,0xfa,0xcb,0x98,0xa9,0x3e,0x0f,0x5c,0x6d,
  33              0x86,0xb7,0xe4,0xd5,0x42,0x73,0x20,0x11,0x3f,0x0e,0x5d,0x6c,0xfb,0xca,0x99,0xa8,
  34              0xc5,0xf4,0xa7,0x96,0x01,0x30,0x63,0x52,0x7c,0x4d,0x1e,0x2f,0xb8,0x89,0xda,0xeb,
  35              0x3d,0x0c,0x5f,0x6e,0xf9,0xc8,0x9b,0xaa,0x84,0xb5,0xe6,0xd7,0x40,0x71,0x22,0x13,
  36              0x7e,0x4f,0x1c,0x2d,0xba,0x8b,0xd8,0xe9,0xc7,0xf6,0xa5,0x94,0x03,0x32,0x61,0x50,
  37              0xbb,0x8a,0xd9,0xe8,0x7f,0x4e,0x1d,0x2c,0x02,0x33,0x60,0x51,0xc6,0xf7,0xa4,0x95,
  38              0xf8,0xc9,0x9a,0xab,0x3c,0x0d,0x5e,0x6f,0x41,0x70,0x23,0x12,0x85,0xb4,0xe7,0xd6,
  39              0x7a,0x4b,0x18,0x29,0xbe,0x8f,0xdc,0xed,0xc3,0xf2,0xa1,0x90,0x07,0x36,0x65,0x54,
  40              0x39,0x08,0x5b,0x6a,0xfd,0xcc,0x9f,0xae,0x80,0xb1,0xe2,0xd3,0x44,0x75,0x26,0x17,
  41              0xfc,0xcd,0x9e,0xaf,0x38,0x09,0x5a,0x6b,0x45,0x74,0x27,0x16,0x81,0xb0,0xe3,0xd2,
  42              0xbf,0x8e,0xdd,0xec,0x7b,0x4a,0x19,0x28,0x06,0x37,0x64,0x55,0xc2,0xf3,0xa0,0x91,
  43              0x47,0x76,0x25,0x14,0x83,0xb2,0xe1,0xd0,0xfe,0xcf,0x9c,0xad,0x3a,0x0b,0x58,0x69,
  44              0x04,0x35,0x66,0x57,0xc0,0xf1,0xa2,0x93,0xbd,0x8c,0xdf,0xee,0x79,0x48,0x1b,0x2a,
  45              0xc1,0xf0,0xa3,0x92,0x05,0x34,0x67,0x56,0x78,0x49,0x1a,0x2b,0xbc,0x8d,0xde,0xef,
  46              0x82,0xb3,0xe0,0xd1,0x46,0x77,0x24,0x15,0x3b,0x0a,0x59,0x68,0xff,0xce,0x9d,0xac
  47          };
  48          
  49          
  50          extern uint8_t Receive_Buff[15];
  51          extern uint8_t Receive_Buffer_Full_Flag;
  52          extern uint8_t Receive_Data_Length;
  53          
  54          
C51 COMPILER V9.56.0.0   PROTOCOL                                                          05/03/2018 16:42:45 PAGE 2   

  55          uint8_t Crc_Caculate(uint8_t *d,uint8_t length)
  56          {
  57   1        uint8_t crc = 0;
  58   1        while(length--)
  59   1        {
  60   2          crc = CRC_Table[crc ^ *d++];
  61   2        }
  62   1        return crc;
  63   1      }
  64          
  65          
  66          void Send_Data(uint8_t *Data,uint8_t length)
  67          {
  68   1        uint8_t i,crc,temp[8];
  69   1        temp[0] = length;
  70   1        UART_SEND;
  71   1        Delay_N_10us(30);
  72   1        IEN0 &= ~0x10;  /* disable uart Interrupt */
  73   1        for(i=1;i<length+1;i++)
  74   1        {
  75   2          temp[i] = *Data;
  76   2          Data++;
  77   2        }
  78   1        crc = Crc_Caculate(&temp,length+1);
  79   1        temp[length+1] = crc;
  80   1        Uart_SendByte(BUS_HEADER);
  81   1        for(i=0;i<length+2;i++)
  82   1        {
  83   2          Uart_SendByte(temp[i]);
  84   2        }   
  85   1        Uart_SendByte(BUS_END);
  86   1        IEN0 |= 0x10;  /* enable uart Interrupt */ 
  87   1        Delay_N_10us(30);
  88   1        UART_RECEIVE;
  89   1      }
  90          
  91          uint8_t Data_Check(void)
  92          {
  93   1        uint8_t Data_Check_OK;
  94   1        Analysis_Lock = 1;
  95   1        Data_Check_OK = Crc_Caculate(&Receive_Buff,Receive_Data_Length);
  96   1        Analysis_Lock = 0;
  97   1        return Data_Check_OK;
  98   1      }
  99          
 100          void Analysis_Request(void)
 101          {
 102   1        uint8_t Data_Check_OK;
 103   1        if(Receive_Buffer_Full_Flag)
 104   1        {
 105   2          Receive_Buffer_Full_Flag = 0;
 106   2          Analysis_Lock = 1;
 107   2          Data_Check_OK = Data_Check();
 108   2          if(!Data_Check_OK)
 109   2          {   
 110   3            Data_Check_OK = 1;  
 111   3            switch(Receive_Buff[0]){
 112   4              case FUN_No1 : No1_Fun();break;
 113   4              case FUN_No2 : No2_Fun();break;//Get_Flash_Times_Level
 114   4              case FUN_No3 : No3_Fun();break;/* get skin color  */
 115   4              //case FUN_No7 : No7_Fun();break;
 116   4              //case FUN_No8 : No8_Fun();break;
C51 COMPILER V9.56.0.0   PROTOCOL                                                          05/03/2018 16:42:45 PAGE 3   

 117   4              case FUN_No11: No11_Fun();break;/* Get Lamp Type */
 118   4              //case FUN_No12: No12_Fun();break;
 119   4              //case FUN_No13: No13_Fun();break;
 120   4              //case FUN_No14: No14_Fun();break;  /* skin type */
 121   4              case FUN_No15: No15_Fun();break;
 122   4              default : break;
 123   4            }
 124   3          }
 125   2          Analysis_Lock = 0;
 126   2        }
 127   1      }
 128           
 129          void No1_Fun(void)    /* get flash times */
 130          {
 131   1        uint8_t temp[4];
 132   1        temp[0] = (uint8_t)Flash_Times;
 133   1        temp[1] = (uint8_t)(Flash_Times>>8);
 134   1        temp[2] = (uint8_t)(Flash_Times>>16);
 135   1        temp[3] = (uint8_t)(Flash_Times>>24);
 136   1        Send_Data(&temp,4);
 137   1      }
 138          
 139          
 140          void No2_Fun(void)   /* get flash times level */
 141          {
 142   1        Send_Data(&Flash_Times_Level,1);
 143   1      }
 144          
 145          void No3_Fun(void)   /* get skin color  */
 146          {
 147   1        //readdata = ADC_Read_Channel_Fun(ADC_RGB_CHANNEL);
 148   1        uint8_t temp[4];
 149   1        temp[0] = (uint8_t)readdata;
 150   1        temp[1] = (uint8_t)(readdata>>8);
 151   1        temp[2] = (uint8_t)(readdata>>16);
 152   1        temp[3] = (uint8_t)(readdata>>24);
 153   1        Send_Data(&temp,4);
 154   1      }
 155          
 156          
 157          
 158          /*void No6_Fun(void)   /* get ERROR flag */
 159          /*{
 160            Send_Data(&Error_Flag,1);
 161          }*/
 162          /*
 163          void No7_Fun(void)   /* Full Charge flag */
 164          /*{
 165            Full_Charge_Flag = Receive_Buff[2]; 
 166          }*/
 167          /*
 168          void No8_Fun(void)  /* Mode Type */
 169          /*{
 170            Mode_Type = Receive_Buff[2];
 171          }*/
 172          
 173          void No11_Fun(void)  /* Get Lamp Type */
 174          {
 175   1        Send_Data(&Lamp_Type,1);
 176   1      }
 177          /*
 178          void No12_Fun(void)  /* get Mode Type */
C51 COMPILER V9.56.0.0   PROTOCOL                                                          05/03/2018 16:42:45 PAGE 4   

 179          /*{
 180            Send_Data(&Mode_Type,1);
 181          }*/
 182          
 183          /*void No13_Fun(void)  /* Lock Flag */
 184          /*{
 185            Lock_Flag = Receive_Buff[2];
 186          }*/
 187           /*
 188          void No14_Fun(void)  /* skin type */
 189          /*{
 190            Send_Data(&Skin_Tpye,1);
 191          }*/
 192          
 193          void No15_Fun(void)  /*all */
 194          {
 195   1        uint8_t da[6];
 196   1        Lock_Flag = Receive_Buff[2];
 197   1        Full_Charge_Flag = Receive_Buff[3];
 198   1        Mode_Type = Receive_Buff[4];
 199   1        Flash_Ready = Receive_Buff[5];
 200   1        Flash_Level = Receive_Buff[6];
 201   1        if(Full_Charge_Flag)
 202   1        {
 203   2          if(!(No_Skin_Flag))//无颜色闪烁功能
 204   2          {
 205   3            Full_Charge_LED_Off;
 206   3          }else{
 207   3            Full_Charge_LED_On;
 208   3          }     
 209   2        }else{
 210   2          Full_Charge_LED_Off;
 211   2        }
 212   1        da[0] = Error_Flag;
 213   1        da[1] = Skin_Tpye;
 214   1        //da[2] = Lamp_Type;
 215   1        da[2] = Lamp_Type;
 216   1        da[3] = Flash_Flag;
 217   1        da[4] = Flash_Times_Level;
 218   1        da[5] = Low_Lamp;
 219   1        Send_Data(&da,6);
 220   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    472    ----
   CONSTANT SIZE    =    256    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4      30
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
