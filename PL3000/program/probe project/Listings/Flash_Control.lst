C51 COMPILER V9.56.0.0   FLASH_CONTROL                                                     05/03/2018 16:42:45 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE FLASH_CONTROL
OBJECT MODULE PLACED IN .\Objects\Flash_Control.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE User\Flash_Control.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\User;.\Option Fil
                    -e) DEBUG OBJECTEXTEND PRINT(.\Listings\Flash_Control.lst) TABS(2) OBJECT(.\Objects\Flash_Control.obj)

line level    source

   1          #include "Flash_Control.h"
   2          #include "protocol.h"
   3          #include "EEPROM.h"
   4          #include "UART.h"
   5          #include "delay.h"
   6          #include "queue.h"
   7          #include "key.h"
   8          #include "skin_color_check.h"
   9          
  10          volatile uint32_t Flash_Times = 0;
  11          
  12          //uint8_t i = 0;
  13          uint8_t Flash_Level = 1;
  14          uint8_t Flash_Off_Flag = 0;
  15          uint8_t EEPROM_Write_Number_Error;
  16          uint8_t Check_Write_EEPROM_Timeout = 0;
  17          uint8_t plus_times;
  18          
  19          extern uint8_t Flash_Times_Level;
  20          extern uint8_t Receive_Buff[15];
  21          extern uint8_t Receive_Buffer_Full_Flag;
  22          extern uint8_t Low_Lamp;
  23          extern uint8_t Mode_Type;
  24          
  25          void Flash_IO_Init(void)
  26          {
  27   1        P07 = 0; //Trig Off;
  28   1        P01 = 0; //Full_charge LED Off;
  29   1        P0M |= 0x82;  //trig pin, full charge pin out mode;
  30   1        P0UR &= ~0x82; //disable pull up; 
  31   1      }
  32          
  33          void Flash_Control(uint8_t plus_times)
  34          {
  35   1        uint16_t Time_Out;
  36   1        uint8_t delay_count = 0;
  37   1        uint8_t Data_Check_OK;
  38   1        uint8_t flash_request = 0;
  39   1        uint8_t Flash_Start = 1;
  40   1        uint8_t Trig_Flag = 1;
  41   1        uint8_t Flash_OK_Flag = 0;
  42   1        uint8_t Charge_OK_Flag =0;
  43   1        uint8_t Flash_Ready_OK_Flag = 0;
  44   1        uint8_t Touch_Key_Not_Release = 1;
  45   1        uint8_t Multi_Flag;
  46   1        if(plus_times > 1)
  47   1        {
  48   2          Multi_Flag = 1;
  49   2        }else{
  50   2          Multi_Flag = 0;
  51   2        }
  52   1        //Delay_ms(3);
  53   1        Send_Data(&Flash_Start,1);
  54   1        while(plus_times)
C51 COMPILER V9.56.0.0   FLASH_CONTROL                                                     05/03/2018 16:42:45 PAGE 2   

  55   1        {       
  56   2          Time_Out = 65530;
  57   2          delay_count = 0;
  58   2          while(!Flash_OK_Flag)
  59   2          {
  60   3            Time_Out--;
  61   3            if((~P1)&0x01)  //Touch Release
  62   3            { 
  63   4              Delay_N_5us(10);
  64   4              if((~P1)&0x01)
  65   4              {
  66   5                Touch_Key_Not_Release = 0;
  67   5                break;
  68   5              }
  69   4            }
  70   3            if(Receive_Buffer_Full_Flag)
  71   3            {
  72   4              Receive_Buffer_Full_Flag = 0;
  73   4              Data_Check_OK = Data_Check();
  74   4              if(!Data_Check_OK)
  75   4              {
  76   5                if(Receive_Buff[0] == FUN_No5)
  77   5                {
  78   6                  Flash_OK_Flag = 1;
  79   6                  //Flash_OK_Flag = Receive_Buff[2];
  80   6                }
  81   5              }
  82   4            }
  83   3            if(Time_Out==0)
  84   3            {
  85   4              delay_count++;
  86   4              Time_Out = 65530;
  87   4              if(delay_count==15)
  88   4              {
  89   5                //Trig_Off;
  90   5                return ;
  91   5              }
  92   4            }
  93   3          }   
  94   2          Flash_OK_Flag = 0;
  95   2          plus_times--;   
  96   2          Send_Data(&Touch_Key_Not_Release,1);
  97   2          if(!Touch_Key_Not_Release)
  98   2          {
  99   3            break;
 100   3          }
 101   2        }
 102   1          
 103   1          if(Multi_Flag)
 104   1          {
 105   2            if(Flash_Level == 1)
 106   2            {
 107   3              Multi_Flash_Times(plus_times,1,Touch_Key_Not_Release);
 108   3            }else{
 109   3              Multi_Flash_Times(plus_times,2*Flash_Level,Touch_Key_Not_Release);
 110   3            }
 111   2          }else{
 112   2                 switch(Flash_Level)
 113   2                 {
 114   3                  case 1: Flash_Times += 2;
 115   3                          break;
 116   3                  case 2: Flash_Times += 8;
C51 COMPILER V9.56.0.0   FLASH_CONTROL                                                     05/03/2018 16:42:45 PAGE 3   

 117   3                          break;;
 118   3                  case 3: Flash_Times += 12;
 119   3                          break;
 120   3                  case 4: Flash_Times += 16;
 121   3                          break;
 122   3                  case 5: Flash_Times += 20;
 123   3                          break;
 124   3                  case 6: Flash_Times += 30;
 125   3                          break;
 126   3                  case 7: Flash_Times += 40;
 127   3                          break;
 128   3                  case 8: Flash_Times += 50;
 129   3                          break; 
 130   3                  default :  
 131   3                          break;  
 132   3                 }
 133   2               }
 134   1        if(((Flash_Times - Read_Num_From_EEPROM())> 65)||((Read_Num_From_EEPROM() - Flash_Times)> 65))
 135   1        {
 136   2          Write_Num_TO_EEPROM(Flash_Times);
 137   2        }
 138   1        if(Flash_Times > Flash_Times_Level8) //>89999 : 90000 ~ 99999
 139   1        {
 140   2          Flash_Times_Level = Flash_Times_Level_1;
 141   2        }
 142   1        if(Flash_Times > Flash_Times_Level9)
 143   1        {
 144   2          Low_Lamp = 1;
 145   2          Flash_Times_Level = 9;
 146   2        }else{
 147   2          Low_Lamp = 0;
 148   2        }
 149   1        Delay_ms(3);
 150   1        
 151   1        Write_Num_TO_EEPROM(Flash_Times);//write Data to eeprom, disable write;
 152   1      
 153   1        while(Flash_Times != Read_Num_From_EEPROM())
 154   1        {
 155   2          Check_Write_EEPROM_Timeout++;
 156   2          Write_Num_TO_EEPROM(Flash_Times);
 157   2          Delay_ms(3);
 158   2          if(Check_Write_EEPROM_Timeout == 20)
 159   2          {
 160   3            Check_Write_EEPROM_Timeout = 0;
 161   3            //EEPROM_Write_Number_Error = 1;
 162   3            return;
 163   3          }
 164   2        }
 165   1        
 166   1        EEPROM_Write_Number_Error = 0;
 167   1      }
 168          
 169          void Multi_Flash_Times(uint8_t plus,uint8_t level_rang,\
 170                                 uint8_t touch_status)
 171          {
 172   1        if(!touch_status)
 173   1        {
 174   2          switch(plus){
 175   3            case 0: Flash_Times += 3*level_rang;break;
 176   3            case 1: Flash_Times += 2*level_rang;break;
 177   3            case 2: Flash_Times += 1*level_rang;break;
 178   3            default:break;
C51 COMPILER V9.56.0.0   FLASH_CONTROL                                                     05/03/2018 16:42:45 PAGE 4   

 179   3          }
 180   2        }else{
 181   2          Flash_Times += 4*level_rang;
 182   2        }
 183   1      }
 184          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    579    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      9      12
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
