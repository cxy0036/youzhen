C51 COMPILER V9.56.0.0   EEPROM                                                            02/01/2018 16:07:19 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\Objects\EEPROM.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE User\EEPROM.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\User;.\Option File) DEBU
                    -G OBJECTEXTEND PRINT(.\Listings\EEPROM.lst) TABS(2) OBJECT(.\Objects\EEPROM.obj)

line level    source

   1          /**
   2            ******************************************************************************
   3            * @file    EEPROM.c
   4            * @author  Captain.
   5            * @version V1.1.0
   6            * @date    2017-6-22
   7            * @brief   Implement 11LC010 UN/IO BUS EEPROM Read , Write ,command Functions.
   8             ******************************************************************************
   9            * @attention
  10            *
  11            * <h2><center>&copy; COPYRIGHT 2017 YUJIN</center></h2>
  12            *
  13            ******************************************************************************
  14            */
  15          
  16          /* Includes ------------------------------------------------------------------*/
  17          #include "EEPROM.h"
  18          #include "delay.h"
  19          #include "Flash_Control.h"
  20          
  21          /* Global variable -----------------------------------------------------------*/
  22          uint8_t EEPROM_ERROR_Flag = 0;  /* EEPROM Read, Write, Timeout Error Flag */
  23          uint8_t EEPROM_Error = 0;
  24          uint8_t EEPROM_Error_Count = 0;
  25          extern uint8_t EEPROM_Write_Number_Error;
  26          extern volatile uint32_t Flash_Times;
  27          
  28          /* Public functions ----------------------------------------------------------*/
  29          
  30          /*
  31          ********************************************************************************
  32          *                           EEPROM INITIALIZATION FUNCTIONS
  33          *
  34          * Description: This function Initial EEPROM IO PORT.
  35          *
  36          * Arguments  : none
  37          *
  38          * Note(s)    : none.
  39          ********************************************************************************
  40          */
  41          void EEPROM_IO(void)
  42          {
  43   1        P07 = 1;
  44   1        //P0OC |= 0x04;
  45   1        P0UR &= ~0x80;  //disable pull up;
  46   1        P0M |= 0x80; //P07 output mode; 
  47   1      }
  48          
  49          /*
  50          ********************************************************************************
  51          *                           EEPROM MAK FUNCTIONS
  52          *
  53          * Description: This function implement EEPROM Master Ask Function.
  54          *
C51 COMPILER V9.56.0.0   EEPROM                                                            02/01/2018 16:07:19 PAGE 2   

  55          * Arguments  : none
  56          *
  57          * Note(s)    : none.
  58          ********************************************************************************
  59          */
  60          
  61          void EEPROM_MAK(void)                    
  62          { 
  63   1        SET_IO_LOW(EEPROM_UNIO_PIN);        /* SCIO Output 0*/
  64   1        //Delay_N_5us(6);
  65   1        Delay_Hfbit();
  66   1        SET_IO_HIGH(EEPROM_UNIO_PIN);        /* SCIO Output 1*/
  67   1        //Delay_N_5us(6);
  68   1        Delay_Hfbit();
  69   1      }
  70          
  71          /*
  72          ********************************************************************************
  73          *                           EEPROM NoMAK FUNCTIONS
  74          *
  75          * Description: This function implement EEPROM NoMAK Function.
  76          *
  77          * Arguments  : none
  78          *
  79          * Note(s)    : none.
  80          ********************************************************************************
  81          */
  82          
  83          void EEPROM_NoMAK(void)                  
  84          { 
  85   1        SET_IO_HIGH(EEPROM_UNIO_PIN);        /* SCIO Output 1*/
  86   1        //Delay_N_5us(6);
  87   1        Delay_Hfbit();
  88   1        SET_IO_LOW(EEPROM_UNIO_PIN);        /* SCIO Output 0*/
  89   1        //Delay_N_5us(6);
  90   1        Delay_Hfbit();
  91   1      }
  92          
  93          /*
  94          ********************************************************************************
  95          *                           EEPROM SAK FUNCTIONS
  96          *
  97          * Description: This function implement EEPROM Slave Ask Function.
  98          *
  99          * Arguments  : none
 100          *
 101          * Note(s)    : If ask timeout, Than set EEPROM Error Flag.
 102          ********************************************************************************
 103          */
 104          void EEPROM_SAK(void)
 105          { 
 106   1        uint8_t timeout = EEPROM_WAIT;
 107   1        P07 = 1;
 108   1        P0M &= ~0x80; //P07 Input mode;
 109   1        while(EEPROM_UNIO_PIN)
 110   1        {
 111   2          timeout--;
 112   2          if(timeout == 0)
 113   2          {
 114   3            //EEPROM_ERROR("SAK Time OUT HI!! errorcode=%d \n",0);
 115   3            EEPROM_ERROR_Flag = 1;
 116   3            P0M |= 0x80;
C51 COMPILER V9.56.0.0   EEPROM                                                            02/01/2018 16:07:19 PAGE 3   

 117   3            return ;      
 118   3          }else{
 119   3            EEPROM_ERROR_Flag = 0;
 120   3          }
 121   2        }
 122   1        //Delay_N_10us(6);  //60us
 123   1        Delay_Hfbit();
 124   1        Delay_Hfbit();
 125   1        if(EEPROM_UNIO_PIN == 0)
 126   1        {
 127   2          EEPROM_ERROR_Flag = 2;
 128   2          P0M |= 0x80;
 129   2          return ;
 130   2        }else{
 131   2          EEPROM_ERROR_Flag = 0;    
 132   2          //SET_IO_HIGH(EEPROM_UNIO_PIN);
 133   2          //P13 = 1;
 134   2          P0M |= 0x80; //P07 output mode;
 135   2        }
 136   1      }
 137          
 138          /*
 139          ********************************************************************************
 140          *                           EEPROM NoSAK FUNCTIONS
 141          *
 142          * Description: This function implement EEPROM NoSAK Function.
 143          *
 144          * Arguments  : none
 145          *
 146          * Note(s)    : If NoAsk timeout, Than set EEPROM Error Flag..
 147          ********************************************************************************
 148          */
 149          void EEPROM_NoSAK(void)
 150          { 
 151   1        uint16_t timeout = EEPROM_WAIT;
 152   1        P07 = 1;
 153   1        P0M &= ~0x80; //P07 Input mode;
 154   1        while(!(EEPROM_UNIO_PIN))        /* if SCIO is 0 */
 155   1        {
 156   2          timeout--;
 157   2          if(timeout == 0)
 158   2          {
 159   3            EEPROM_ERROR_Flag = 3;
 160   3            P0M |= 0x80;
 161   3            return  ;
 162   3          }else{
 163   3            EEPROM_ERROR_Flag = 0;
 164   3          }
 165   2        }
 166   1        //Delay_N_10us(6); //60us
 167   1        Delay_Hfbit();
 168   1        Delay_Hfbit();
 169   1        if(EEPROM_UNIO_PIN == 0)
 170   1        {
 171   2          EEPROM_ERROR_Flag = 4;
 172   2          return  ;
 173   2        }else{
 174   2          EEPROM_ERROR_Flag = 0;
 175   2          P0M |= 0x80;
 176   2        }
 177   1        //P13 = 1;
 178   1        //P2M |= 0x01; //P20 output mode;
C51 COMPILER V9.56.0.0   EEPROM                                                            02/01/2018 16:07:19 PAGE 4   

 179   1        //SET_IO_DIR_OUT(EEPORM_UNIO_PORT,EEPROM_UNIO_PIN);     /* change direction Output */
 180   1      }
 181          
 182          /*
 183          ********************************************************************************
 184          *                        WRITE ONE BYTE TO EEPROM FUNCTIONS
 185          *
 186          * Description: This function implement write one byte to EEPROM Timing Function,
 187          * Is called by all need write Data functions.
 188          *
 189          * Arguments  : Write Data, one Byte
 190          *
 191          * Note(s)    : none.
 192          ********************************************************************************
 193          */
 194          void EEPROM_Write_Byte(uint8_t write_data)
 195          {
 196   1        uint8_t t = 0x80;
 197   1        while(t)
 198   1        {
 199   2          if(write_data & t)
 200   2          {
 201   3            SET_IO_LOW(EEPROM_UNIO_PIN);
 202   3            //Delay_N_5us(6);
 203   3            Delay_Hfbit();
 204   3            SET_IO_HIGH(EEPROM_UNIO_PIN);
 205   3            Delay_Hfbit();
 206   3            //Delay_N_5us(6);
 207   3          }else{
 208   3            SET_IO_HIGH(EEPROM_UNIO_PIN);
 209   3            //Delay_N_5us(6);
 210   3            Delay_Hfbit();
 211   3            SET_IO_LOW(EEPROM_UNIO_PIN);
 212   3            //Delay_N_5us(6);
 213   3            Delay_Hfbit();
 214   3          }
 215   2          t = t >> 1;
 216   2        }  
 217   1      }
 218          
 219          /*
 220          ********************************************************************************
 221          *                        READ ONE BYTE FROM EEPROM FUNCTIONS
 222          *
 223          * Description: This function implement read one byte from EEPROM Function,
 224          * Is called by read Data functions.
 225          *
 226          * Arguments  : none.
 227          *
 228          * Return : Read Data, One byte.
 229          *
 230          * Note(s)    : If read timeout, Than set EEPROM ERROR Flag.
 231          ********************************************************************************
 232          */
 233          uint8_t EEPROM_Read_Byte(void)
 234          {
 235   1        uint8_t t = 0x80;
 236   1        uint8_t readtmp = 0;
 237   1        P07 = 1;
 238   1        P0M &= ~0x80; //P20 Input mode;
 239   1        while(t)
 240   1        {
C51 COMPILER V9.56.0.0   EEPROM                                                            02/01/2018 16:07:19 PAGE 5   

 241   2          Delay_Qbit2();
 242   2          if(EEPROM_UNIO_PIN == 0)
 243   2          {
 244   3            Delay_Hfbit();
 245   3            if(EEPROM_UNIO_PIN == 0)
 246   3            {
 247   4              EEPROM_ERROR_Flag = 5;
 248   4              P0M |= 0x80;
 249   4              return 0;
 250   4            }else{
 251   4              EEPROM_ERROR_Flag = 0;
 252   4              readtmp |= t;
 253   4            }
 254   3          }else{
 255   3              Delay_Hfbit();
 256   3              if(EEPROM_UNIO_PIN == 1)
 257   3              {
 258   4                EEPROM_ERROR_Flag = 6;
 259   4                P0M |= 0x80;
 260   4                return 0;
 261   4              }else{
 262   4                EEPROM_ERROR_Flag = 0;
 263   4                readtmp &= ~t;
 264   4              }
 265   3          }
 266   2          Delay_Qbit();
 267   2          t = t >> 1;
 268   2        }
 269   1        //P13 = 1;
 270   1        P0M |= 0x80; //P20 Output mode;
 271   1        return readtmp;
 272   1      }
 273          
 274          /*
 275          ********************************************************************************
 276          *                        EEPROM  STAERT HEADER FUNCTIONS
 277          *
 278          * Description: This function implement EEPROM start header Function,
 279          * Is called all EERPOM operation.
 280          *
 281          * Arguments  : none.
 282          *
 283          * Return : none.
 284          *
 285          * Note(s)    : If timeout, Than set EEPROM ERROR Flag.
 286          ********************************************************************************
 287          */
 288          
 289          void EEPROM_StartHeader(void)
 290          {
 291   1        SET_IO_LOW(EEPROM_UNIO_PIN);
 292   1        Delay_N_5us(4);
 293   1        SET_IO_HIGH(EEPROM_UNIO_PIN);
 294   1        Delay_N_10us(80);
 295   1        SET_IO_LOW(EEPROM_UNIO_PIN);
 296   1        Delay_N_5us(4);
 297   1        EEPROM_Write_Byte(EEPROM_STARTHEADER);
 298   1        EEPROM_MAK();
 299   1        EEPROM_NoSAK();
 300   1      }
 301          
 302          
C51 COMPILER V9.56.0.0   EEPROM                                                            02/01/2018 16:07:19 PAGE 6   

 303          /*
 304          ********************************************************************************
 305          *                        EEPROM READ DATA FUNCTIONS
 306          *
 307          * Description: This function implementEEPROM_Read_Data Function.
 308          * Read N Data from EEPROM address to detination address.
 309          *
 310          * Arguments  : detination address, EEPROM Data addres, Number of Data.
 311          *
 312          * Return : none.
 313          *
 314          * Note(s)    : If timeout, Than set EEPROM ERROR Flag.
 315          ********************************************************************************
 316          */
 317          /*
 318          void EEPROM_Read_Data(uint8_t *data_arry, uint16_t read_addr, uint8_t read_num)
 319          {
 320            uint8_t i,read_addr_tmpH,read_addr_tmpL;
 321            
 322            read_addr_tmpH = (read_addr >> 8) & 0xFF;
 323            read_addr_tmpL = read_addr & 0xFF;
 324            EEPROM_StartHeader();
 325            EEPROM_Write_Byte(EEPROM_DEVICE_ADDR);
 326            EEPROM_MAK();
 327            EEPROM_SAK();
 328            EEPROM_Write_Byte(CMD_READ);
 329            EEPROM_MAK();
 330            EEPROM_SAK();
 331            EEPROM_Write_Byte(read_addr_tmpH);
 332            EEPROM_MAK();
 333            EEPROM_SAK(); 
 334            EEPROM_Write_Byte(read_addr_tmpL);
 335            EEPROM_MAK();
 336            EEPROM_SAK();
 337            data_arry[0] = EEPROM_Read_Byte();
 338            EEPROM_MAK();
 339            EEPROM_SAK();
 340            data_arry[1] = EEPROM_Read_Byte();
 341            EEPROM_MAK();
 342            EEPROM_SAK();
 343            data_arry[2] = EEPROM_Read_Byte();
 344            EEPROM_MAK();
 345            EEPROM_SAK();
 346            data_arry[3] = EEPROM_Read_Byte();
 347            EEPROM_MAK();
 348            EEPROM_SAK();
 349            
 350            for(i=0;i<read_num;i++)
 351            {
 352              data_arry[i] = EEPROM_Read_Byte();
 353              if(i == (read_num-1))
 354              {
 355                EEPROM_NoMAK();
 356              }else{
 357                EEPROM_MAK();
 358              }   
 359              EEPROM_SAK();
 360            }
 361          }
 362          
 363          */
 364          /*
C51 COMPILER V9.56.0.0   EEPROM                                                            02/01/2018 16:07:19 PAGE 7   

 365          ********************************************************************************
 366          *                        EEPROM WRITE DATA FUNCTIONS
 367          *
 368          * Description: EEPROM_Write_Data Function.
 369          * Wirte N Data to EEPROM address.
 370          *
 371          * Arguments  : Data address, EEPROM detination address, Number of Data.
 372          *
 373          * Return : none.
 374          *
 375          * Note(s)    : If timeout, Than set EEPROM ERROR Flag.
 376          ********************************************************************************
 377          */
 378          
 379          void EEPROM_Write_Data(uint8_t *data_arry, uint16_t write_addr, uint8_t write_num)
 380          {
 381   1        uint8_t i,write_addr_tmpH,write_addr_tmpL;
 382   1        
 383   1        write_addr_tmpH = (write_addr >> 8) & 0xFF;
 384   1        write_addr_tmpL = write_addr & 0xFF;
 385   1        EEPROM_Write_CMD(CMD_WREN);
 386   1        EEPROM_StartHeader();
 387   1        EEPROM_Write_Byte(EEPROM_DEVICE_ADDR);
 388   1        EEPROM_MAK();
 389   1        EEPROM_SAK();
 390   1        EEPROM_Write_Byte(CMD_WRITE);
 391   1        EEPROM_MAK();
 392   1        EEPROM_SAK();
 393   1        EEPROM_Write_Byte(write_addr_tmpH);
 394   1        EEPROM_MAK();
 395   1        EEPROM_SAK(); 
 396   1        EEPROM_Write_Byte(write_addr_tmpL);
 397   1        EEPROM_MAK();
 398   1        EEPROM_SAK();
 399   1        
 400   1        for(i=0;i<write_num;i++)
 401   1        {
 402   2          EEPROM_Write_Byte(data_arry[i]);
 403   2          if(i == (write_num - 1))
 404   2          {
 405   3            EEPROM_NoMAK();
 406   3          }else{
 407   3            EEPROM_MAK();
 408   3          }
 409   2          EEPROM_SAK();
 410   2        }
 411   1        Delay_ms(20);
 412   1      }
 413          
 414          /*
 415          ********************************************************************************
 416          *                        EEPROM WRITE COMMAND FUNCTIONS
 417          *
 418          * Description: EEPROM_Write_CMD Function.
 419          *
 420          * Arguments  : Command.
 421          *
 422          * Return : none.
 423          *
 424          * Note(s)    : If timeout, Than set EEPROM ERROR Flag.
 425          ********************************************************************************
 426          */
C51 COMPILER V9.56.0.0   EEPROM                                                            02/01/2018 16:07:19 PAGE 8   

 427          void EEPROM_Write_CMD(uint8_t cmd)
 428          {
 429   1        EEPROM_StartHeader();
 430   1        EEPROM_Write_Byte(EEPROM_DEVICE_ADDR);
 431   1        EEPROM_MAK();
 432   1        EEPROM_SAK();
 433   1        EEPROM_Write_Byte(cmd);
 434   1        EEPROM_NoMAK();
 435   1        EEPROM_SAK();
 436   1        if((cmd == CMD_ERAL) || (cmd == CMD_SETAL))
 437   1        {
 438   2          Delay_ms(20);
 439   2        }
 440   1      }
 441          
 442          /*
 443          ********************************************************************************
 444          *                        EEPROM READ STATUS FUNCTIONS
 445          *
 446          * Description: EEPROM_Read_SR Function.
 447          *
 448          * Arguments  : none.
 449          *
 450          * Return : EEPROM status Register Data.
 451          *
 452          * Note(s)    : If timeout, Than set EEPROM ERROR Flag.
 453          ********************************************************************************
 454          */
 455          /*
 456          uint8_t EEPROM_Read_SR(void)
 457          {
 458            uint8_t Bit;
 459            
 460            EEPROM_StartHeader();
 461            
 462            EEPROM_Write_Byte(EEPROM_DEVICE_ADDR);
 463            EEPROM_MAK();
 464            EEPROM_SAK();
 465            
 466            EEPROM_Write_Byte(CMD_RDSR); /* write read status regist commad */
 467           /* EEPROM_MAK();
 468            EEPROM_SAK();
 469            Bit = EEPROM_Read_Byte();
 470            EEPROM_NoMAK();
 471            EEPROM_SAK();
 472            return Bit;
 473          }
 474          */
 475          
 476          /*
 477          ********************************************************************************
 478          *                        EEPROM WRITE STATUS FUNCTIONS
 479          *
 480          * Description: EEPROM_Write_SR Function.
 481          *
 482          * Arguments  : The status Data.
 483          *
 484          * Return : none.
 485          *
 486          * Note(s)    : If timeout, Than set EEPROM ERROR Flag.
 487          ********************************************************************************
 488          */
C51 COMPILER V9.56.0.0   EEPROM                                                            02/01/2018 16:07:19 PAGE 9   

 489          /*
 490          void EEPROM_Write_SR(uint8_t srdata)
 491          {
 492            EEPROM_StartHeader(); /* start head */
 493            
 494          /*  EEPROM_Write_Byte(EEPROM_DEVICE_ADDR);  /* write device address */
 495          /*  EEPROM_MAK();
 496            EEPROM_SAK();
 497            
 498            EEPROM_Write_Byte(CMD_WRSR); /* write commad */
 499          /*  EEPROM_MAK();
 500            EEPROM_SAK();
 501            EEPROM_Write_Byte(srdata); /* write status Data */
 502          /*  EEPROM_NoMAK();
 503            EEPROM_SAK();
 504            Delay_ms(10); /* delay Twc(5-10ms) time */
 505          /*}
 506          */
 507          
 508          /*
 509          ********************************************************************************
 510          *                        WRITE NUMBER TO EEPROM FUNCTIONS
 511          *
 512          * Description: Write a 32 Bit(0-4294967295) number to EEPROM, Is use to write flash 
 513          * times to EEPORM.
 514          *
 515          * Arguments  : The 32bit number Data.
 516          *
 517          * Return : none.
 518          *
 519          * Note(s)    : If timeout, Than set EEPROM ERROR Flag.  
 520          *              If you want change the write address in EEPROM, You can change 
 521          *              the macro DATA_ADDR in EEPROM.h.
 522          ********************************************************************************
 523          */
 524          /*
 525          void Write_Num_TO_EEPROM(uint32_t flash_count)
 526          {
 527            uint8_t data_arry[4];
 528            uint8_t i;
 529            data_arry[3] = (uint8_t)(flash_count >> 24);  /* 32 Bit unmerge two 8 Bit Data */
 530           /* data_arry[2] = (uint8_t)(flash_count >> 16);
 531            data_arry[1] = (uint8_t)(flash_count >> 8);
 532            data_arry[0] = (uint8_t)(flash_count);
 533             /* write Data to DATA_ADDR in EEPROM */
 534          
 535            /*EEPROM_Write_CMD(CMD_WREN);
 536            EEPROM_StartHeader();
 537            EEPROM_Write_Byte(EEPROM_DEVICE_ADDR);
 538            EEPROM_MAK();
 539            EEPROM_SAK();
 540            EEPROM_Write_Byte(CMD_WRITE);
 541            EEPROM_MAK();
 542            EEPROM_SAK();
 543            EEPROM_Write_Byte(DATA_ADDR_H);
 544            EEPROM_MAK();
 545            EEPROM_SAK(); 
 546            EEPROM_Write_Byte(DATA_ADDR_L);
 547            EEPROM_MAK();
 548            EEPROM_SAK();
 549            
 550            for(i=0;i<4;i++)
C51 COMPILER V9.56.0.0   EEPROM                                                            02/01/2018 16:07:19 PAGE 10  

 551            {
 552              EEPROM_Write_Byte(data_arry[i]);
 553              if(i == 3)
 554              {
 555                EEPROM_NoMAK();
 556              }else{
 557                EEPROM_MAK();
 558              }
 559              EEPROM_SAK();
 560            }
 561            Delay_ms(20);
 562            EEPROM_Write_CMD(CMD_WRDI);  /* Disable write, protect EEPROM Data*/
 563          /*}*/
 564          
 565          /*
 566          ********************************************************************************
 567          *                        READ NUMBER FROM EEPROM FUNCTIONS
 568          *
 569          * Description: Read a 32 Bit(0-4294967295) number from EEPROM, Is use to read flash 
 570          * times from EEPORM.
 571          *
 572          * Arguments  : none.
 573          *
 574          * Return : Read Number Data.
 575          *
 576          * Note(s)    : If timeout, Than set EEPROM ERROR Flag.
 577          *              If you want change the write address in EEPROM, You can change 
 578          *              the macro DATA_ADDR in EEPROM.h.
 579          ********************************************************************************
 580          */
 581          
 582          void Write_Num_TO_EEPROM(uint32_t flash_count)
 583          {
 584   1        uint8_t dataHH,dataHL,dataLH,dataLL,data_arry[4];
 585   1        dataHH = (uint8_t)(flash_count >> 24);  /* 32 bit unmerge two 8 bit ddata */
 586   1        dataHL = (uint8_t)(flash_count >> 16);
 587   1        dataLH = (uint8_t)(flash_count >> 8);
 588   1        dataLL = (uint8_t)(flash_count);
 589   1        data_arry[0] = dataLL;
 590   1        data_arry[1] = dataLH;
 591   1        data_arry[2] = dataHL;
 592   1        data_arry[3] = dataHH;
 593   1        EEPROM_Write_Data(data_arry,DATA_ADDR,4);  /* write data to DATA_ADDR in EEPROM */
 594   1        EEPROM_Write_CMD(CMD_WRDI);  /* Disable write, protect EEPROM Data*/
 595   1      }
 596          
 597          uint32_t Read_Num_From_EEPROM(void)
 598          {
 599   1        uint8_t read_arry[4];
 600   1        uint32_t read_data;
 601   1        EEPROM_StartHeader();
 602   1        EEPROM_Write_Byte(EEPROM_DEVICE_ADDR);
 603   1        EEPROM_MAK();
 604   1        EEPROM_SAK();
 605   1        EEPROM_Write_Byte(CMD_READ);
 606   1        EEPROM_MAK();
 607   1        EEPROM_SAK();
 608   1        EEPROM_Write_Byte(DATA_ADDR_H);
 609   1        EEPROM_MAK();
 610   1        EEPROM_SAK(); 
 611   1        EEPROM_Write_Byte(DATA_ADDR_L);
 612   1        EEPROM_MAK();
C51 COMPILER V9.56.0.0   EEPROM                                                            02/01/2018 16:07:19 PAGE 11  

 613   1        EEPROM_SAK();
 614   1        read_arry[0] = EEPROM_Read_Byte();
 615   1        EEPROM_MAK();
 616   1        EEPROM_SAK();
 617   1        read_arry[1] = EEPROM_Read_Byte();
 618   1        EEPROM_MAK();
 619   1        EEPROM_SAK();
 620   1        read_arry[2] = EEPROM_Read_Byte();
 621   1        EEPROM_MAK();
 622   1        EEPROM_SAK();
 623   1        read_arry[3] = EEPROM_Read_Byte();
 624   1        EEPROM_NoMAK();
 625   1        EEPROM_SAK();
 626   1        
 627   1        //EEPROM_Read_Data(read_arry,DATA_ADDR,4);  /* read two data from DATA_ADDR in EEPORM */
 628   1        //read_data = read_arry[3];  /* Two 8 bit data merge one 32 bit data */
 629   1        
 630   1        read_data = ((uint32_t)read_arry[3] << 24) | ((uint32_t)read_arry[2] << 16) | \
 631   1                    ((uint32_t)read_arry[1] << 8) | (uint32_t)read_arry[0];
 632   1                    
 633   1        return read_data;  /* return read data */
 634   1      }
 635          /*
 636          uint8_t Read_Lamp_Type_From_EEPROM(void)
 637          {
 638            uint8_t read_data;
 639            EEPROM_StartHeader();
 640            EEPROM_Write_Byte(EEPROM_DEVICE_ADDR);
 641            EEPROM_MAK();
 642            EEPROM_SAK();
 643            EEPROM_Write_Byte(CMD_READ);
 644            EEPROM_MAK();
 645            EEPROM_SAK();
 646            EEPROM_Write_Byte(LAMP_TYPE_ADDR_H);
 647            EEPROM_MAK();
 648            EEPROM_SAK(); 
 649            EEPROM_Write_Byte(LAMP_TYPE_ADDR_L);
 650            EEPROM_MAK();
 651            EEPROM_SAK();
 652            read_data = EEPROM_Read_Byte();
 653            EEPROM_NoMAK();
 654            EEPROM_SAK();
 655            return read_data;
 656          }
 657          */
 658          void EEPROM_Write_Check(void)
 659          { 
 660   1        if(EEPROM_Write_Number_Error)
 661   1        {   
 662   2          //IEN0 &= ~0x80;
 663   2      //disable uart interrupt
 664   2          Write_Num_TO_EEPROM(Flash_Times);   
 665   2          if(Flash_Times == Read_Num_From_EEPROM())
 666   2          {
 667   3            EEPROM_Write_Number_Error = 0;
 668   3            EEPROM_Error_Count = 0;
 669   3            EEPROM_Error = 0;
 670   3          }else{
 671   3            EEPROM_Error_Count++;
 672   3            if(EEPROM_Error_Count == 20)
 673   3            {
 674   4              EEPROM_Error_Count = 0;
C51 COMPILER V9.56.0.0   EEPROM                                                            02/01/2018 16:07:19 PAGE 12  

 675   4              EEPROM_Error = 1;
 676   4            }
 677   3          }
 678   2          //IEN0 |= 0x80;  //enable uart interrupt
 679   2        } 
 680   1      }
 681          
 682          
 683          /************************ (C) COPYRIGHT YUJIN *****END OF FILE*****************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    760    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3      26
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
