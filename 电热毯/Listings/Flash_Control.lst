C51 COMPILER V9.56.0.0   FLASH_CONTROL                                                     02/01/2018 16:07:20 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE FLASH_CONTROL
OBJECT MODULE PLACED IN .\Objects\Flash_Control.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE User\Flash_Control.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\User;.\Option Fil
                    -e) DEBUG OBJECTEXTEND PRINT(.\Listings\Flash_Control.lst) TABS(2) OBJECT(.\Objects\Flash_Control.obj)

line level    source

   1          #include "Flash_Control.h"
   2          #include "protocol.h"
   3          #include "EEPROM.h"
   4          #include "UART.h"
   5          #include "delay.h"
   6          #include "queue.h"
   7          #include "key.h"
   8          #include "skin_color_check.h"
   9          
  10          volatile uint32_t Flash_Times = 0;
  11          volatile uint32_t Flash_Times1 = 0;
  12          volatile uint32_t Flash_Times2 = 0;
  13          volatile uint32_t Flash_Times3 = 0;
  14          
  15          //uint8_t i = 0;
  16          uint8_t Flash_Level = 1;
  17          uint8_t Flash_Off_Flag = 0;
  18          uint8_t EEPROM_Write_Number_Error;
  19          uint8_t Check_Write_EEPROM_Timeout = 0;
  20          
  21          extern uint8_t Flash_Times_Level;
  22          extern uint8_t Receive_Buff[15];
  23          extern uint8_t Receive_Buffer_Full_Flag;
  24          extern uint8_t Low_Lamp;
  25          extern uint8_t Mode_Type;
  26          
  27          void Flash_IO_Init(void)
  28          {
  29   1        P07 = 0; //Trig Off;
  30   1        P01 = 0; //Full_charge LED Off;
  31   1        P0M |= 0x82;  //trig pin, full charge pin out mode;
  32   1        P0UR &= ~0x82; //disable pull up; 
  33   1      }
  34          
  35          void Flash_Control(uint8_t plus_times)
  36          {
  37   1        uint16_t Time_Out;
  38   1        uint16_t delay_count = 0;
  39   1        uint8_t Data_Check_OK;
  40   1        uint8_t flash_request = 0;
  41   1        uint8_t Flash_Start = 1;
  42   1        uint8_t Trig_Flag = 1;
  43   1        uint8_t Flash_OK_Flag = 0;
  44   1        uint8_t Charge_OK_Flag =0;
  45   1        uint8_t Flash_Ready_OK_Flag = 0;
  46   1        uint8_t Touch_Key_Not_Release = 1;
  47   1        uint8_t Multi_Flag;
  48   1        if(plus_times > 1)
  49   1        {
  50   2          Multi_Flag = 1;
  51   2        }else{
  52   2          Multi_Flag = 0;
  53   2        }
  54   1        //Delay_ms(3);
C51 COMPILER V9.56.0.0   FLASH_CONTROL                                                     02/01/2018 16:07:20 PAGE 2   

  55   1        Send_Data(&Flash_Start,1);
  56   1        while(plus_times)
  57   1        {       
  58   2          Time_Out = 65530;
  59   2          delay_count = 0;
  60   2          while(!Flash_OK_Flag)
  61   2          {
  62   3            Time_Out--;
  63   3            if(P1&0x01)  //Touch Release
  64   3            { 
  65   4              //Delay_N_5us(10);
  66   4              if(P1&0x01)
  67   4              {
  68   5                Touch_Key_Not_Release = 0;
  69   5                break;
  70   5              }
  71   4            }
  72   3            if(Receive_Buffer_Full_Flag)
  73   3            {
  74   4              Receive_Buffer_Full_Flag = 0;
  75   4              Data_Check_OK = Data_Check();
  76   4              if(!Data_Check_OK)
  77   4              {
  78   5                if(Receive_Buff[0] == FUN_No5)
  79   5                {
  80   6                  Flash_OK_Flag = 1;
  81   6                  //Flash_OK_Flag = Receive_Buff[2];
  82   6                }
  83   5              }
  84   4            }
  85   3            if(Time_Out==0)
  86   3            {
  87   4              delay_count++;
  88   4              Time_Out = 65530;
  89   4              if(delay_count==2500)
  90   4              {
  91   5                //Trig_Off;
  92   5                return ;
  93   5              }
  94   4            }
  95   3          }   
  96   2          Flash_OK_Flag = 0;
  97   2          plus_times--;   
  98   2          Send_Data(&Touch_Key_Not_Release,1);
  99   2          if(!Touch_Key_Not_Release)
 100   2          {
 101   3            break;
 102   3          }
 103   2        }
 104   1        
 105   1        if(Flash_Level <= 3)
 106   1        {
 107   2          if(Multi_Flag)
 108   2          {
 109   3           Multi_Flash_Times(plus_times,1,Touch_Key_Not_Release);
 110   3          }else{
 111   3            Flash_Times ++;
 112   3          }
 113   2        }else{
 114   2          if(Flash_Level <= 5)
 115   2          {
 116   3            if(Multi_Flag)
C51 COMPILER V9.56.0.0   FLASH_CONTROL                                                     02/01/2018 16:07:20 PAGE 3   

 117   3            {     
 118   4             Multi_Flash_Times(plus_times,2,Touch_Key_Not_Release); 
 119   4            }else{
 120   4              Flash_Times += 3;
 121   4            }
 122   3          }else{
 123   3            if(Multi_Flag)
 124   3            {
 125   4             Multi_Flash_Times(plus_times,3,Touch_Key_Not_Release);
 126   4            }else{
 127   4              Flash_Times += 5;
 128   4            }
 129   3          }
 130   2        }
 131   1        if(Flash_Times > Flash_Times_Level8) //>89999 : 90000 ~ 99999
 132   1        {
 133   2          Flash_Times_Level = Flash_Times_Level_1;
 134   2        }
 135   1        if(Flash_Times > Flash_Times_Level9)
 136   1        {
 137   2          Low_Lamp = 1;
 138   2          Flash_Times_Level = 9;
 139   2        }else{
 140   2          Low_Lamp = 0;
 141   2        }
 142   1        Delay_ms(5);
 143   1        //IEN0 &= ~0x80; //disable uart interrupt  IEN0 |= 0x80;
 144   1        Write_Num_TO_EEPROM(Flash_Times);//write Data to eeprom, disable write;
 145   1        while(Flash_Times != Read_Num_From_EEPROM())
 146   1        {
 147   2          Check_Write_EEPROM_Timeout++;
 148   2          Write_Num_TO_EEPROM(Flash_Times);
 149   2          if(Check_Write_EEPROM_Timeout == 3)
 150   2          {
 151   3            Check_Write_EEPROM_Timeout = 0;
 152   3            EEPROM_Write_Number_Error = 1;
 153   3            return;
 154   3          }
 155   2        }
 156   1        //IEN0 |= 0x80;  //enable uart interrupt
 157   1        EEPROM_Write_Number_Error = 0;
 158   1      }
 159          
 160          void Multi_Flash_Times(uint8_t plus,uint8_t level_rang,\
 161                                 uint8_t touch_status)
 162          {
 163   1        if(!touch_status)
 164   1        {
 165   2          switch(plus){
 166   3            case 0: Flash_Times += 3*level_rang;break;
 167   3            case 1: Flash_Times += 2*level_rang;break;
 168   3            case 2: Flash_Times += 1*level_rang;break;
 169   3            default:break;
 170   3          }
 171   2        }else{
 172   2          Flash_Times += 4*level_rang;
 173   2        }
 174   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    471    ----
C51 COMPILER V9.56.0.0   FLASH_CONTROL                                                     02/01/2018 16:07:20 PAGE 4   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     20      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
