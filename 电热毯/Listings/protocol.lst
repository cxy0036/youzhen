C51 COMPILER V9.56.0.0   PROTOCOL                                                          02/01/2018 16:07:19 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE PROTOCOL
OBJECT MODULE PLACED IN .\Objects\protocol.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE User\protocol.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\User;.\Option File) DE
                    -BUG OBJECTEXTEND PRINT(.\Listings\protocol.lst) TABS(2) OBJECT(.\Objects\protocol.obj)

line level    source

   1          #include "protocol.h"
   2          #include "UART.h"
   3          #include "delay.h"
   4          #include "Error_Check.h"
   5          #include "Flash_Control.h"
   6          #include "skin_color_check.h"
   7          #include "key.h"
   8          
   9          uint8_t Analysis_Lock = 0;
  10          uint8_t Flash_Times_Level = 0;
  11          uint8_t Lock_Flag = 1;
  12          //uint8_t Get_Mode_Type = 1;
  13          uint8_t Flash_Ready = 0;
  14          
  15          extern uint8_t No_Skin_Flag;
  16          extern uint8_t Mode_Type;
  17          extern uint8_t Key_Count;
  18          extern volatile uint32_t Flash_Times;
  19          extern uint8_t Error_Flag;
  20          extern uint8_t Full_Charge_Flag;
  21          extern uint8_t Flash_Level;
  22          extern uint8_t Lamp_Type;
  23          extern uint8_t Skin_Tpye;
  24          extern uint8_t Flash_Flag;
  25          extern uint8_t Mode_Change;
  26          extern uint8_t Low_Lamp;
  27          
  28          static const uint8_t code CRC_Table[256]={
  29              0x00,0x31,0x62,0x53,0xc4,0xf5,0xa6,0x97,0xb9,0x88,0xdb,0xea,0x7d,0x4c,0x1f,0x2e,
  30              0x43,0x72,0x21,0x10,0x87,0xb6,0xe5,0xd4,0xfa,0xcb,0x98,0xa9,0x3e,0x0f,0x5c,0x6d,
  31              0x86,0xb7,0xe4,0xd5,0x42,0x73,0x20,0x11,0x3f,0x0e,0x5d,0x6c,0xfb,0xca,0x99,0xa8,
  32              0xc5,0xf4,0xa7,0x96,0x01,0x30,0x63,0x52,0x7c,0x4d,0x1e,0x2f,0xb8,0x89,0xda,0xeb,
  33              0x3d,0x0c,0x5f,0x6e,0xf9,0xc8,0x9b,0xaa,0x84,0xb5,0xe6,0xd7,0x40,0x71,0x22,0x13,
  34              0x7e,0x4f,0x1c,0x2d,0xba,0x8b,0xd8,0xe9,0xc7,0xf6,0xa5,0x94,0x03,0x32,0x61,0x50,
  35              0xbb,0x8a,0xd9,0xe8,0x7f,0x4e,0x1d,0x2c,0x02,0x33,0x60,0x51,0xc6,0xf7,0xa4,0x95,
  36              0xf8,0xc9,0x9a,0xab,0x3c,0x0d,0x5e,0x6f,0x41,0x70,0x23,0x12,0x85,0xb4,0xe7,0xd6,
  37              0x7a,0x4b,0x18,0x29,0xbe,0x8f,0xdc,0xed,0xc3,0xf2,0xa1,0x90,0x07,0x36,0x65,0x54,
  38              0x39,0x08,0x5b,0x6a,0xfd,0xcc,0x9f,0xae,0x80,0xb1,0xe2,0xd3,0x44,0x75,0x26,0x17,
  39              0xfc,0xcd,0x9e,0xaf,0x38,0x09,0x5a,0x6b,0x45,0x74,0x27,0x16,0x81,0xb0,0xe3,0xd2,
  40              0xbf,0x8e,0xdd,0xec,0x7b,0x4a,0x19,0x28,0x06,0x37,0x64,0x55,0xc2,0xf3,0xa0,0x91,
  41              0x47,0x76,0x25,0x14,0x83,0xb2,0xe1,0xd0,0xfe,0xcf,0x9c,0xad,0x3a,0x0b,0x58,0x69,
  42              0x04,0x35,0x66,0x57,0xc0,0xf1,0xa2,0x93,0xbd,0x8c,0xdf,0xee,0x79,0x48,0x1b,0x2a,
  43              0xc1,0xf0,0xa3,0x92,0x05,0x34,0x67,0x56,0x78,0x49,0x1a,0x2b,0xbc,0x8d,0xde,0xef,
  44              0x82,0xb3,0xe0,0xd1,0x46,0x77,0x24,0x15,0x3b,0x0a,0x59,0x68,0xff,0xce,0x9d,0xac
  45          };
  46          
  47          
  48          extern uint8_t Receive_Buff[15];
  49          extern uint8_t Receive_Buffer_Full_Flag;
  50          extern uint8_t Receive_Data_Length;
  51          
  52          
  53          uint8_t Crc_Caculate(uint8_t *d,uint8_t length)
  54          {
C51 COMPILER V9.56.0.0   PROTOCOL                                                          02/01/2018 16:07:19 PAGE 2   

  55   1        uint8_t crc = 0;
  56   1        while(length--)
  57   1        {
  58   2          crc = CRC_Table[crc ^ *d++];
  59   2        }
  60   1        return crc;
  61   1      }
  62          
  63          
  64          void Send_Data(uint8_t *Data,uint8_t length)
  65          {
  66   1        uint8_t i,crc,temp[8];
  67   1        temp[0] = length;
  68   1        UART_SEND;
  69   1        Delay_N_10us(30);
  70   1        IEN0 &= ~0x10;  /* disable uart Interrupt */
  71   1        for(i=1;i<length+1;i++)
  72   1        {
  73   2          temp[i] = *Data;
  74   2          Data++;
  75   2        }
  76   1        crc = Crc_Caculate(&temp,length+1);
  77   1        temp[length+1] = crc;
  78   1        Uart_SendByte(BUS_HEADER);
  79   1        for(i=0;i<length+2;i++)
  80   1        {
  81   2          Uart_SendByte(temp[i]);
  82   2        }   
  83   1        Uart_SendByte(BUS_END);
  84   1        IEN0 |= 0x10;  /* enable uart Interrupt */ 
  85   1        Delay_N_10us(30);
  86   1        UART_RECEIVE;
  87   1      }
  88          
  89          uint8_t Data_Check(void)
  90          {
  91   1        uint8_t Data_Check_OK;
  92   1        Analysis_Lock = 1;
  93   1        Data_Check_OK = Crc_Caculate(&Receive_Buff,Receive_Data_Length);
  94   1        Analysis_Lock = 0;
  95   1        return Data_Check_OK;
  96   1      }
  97          
  98          void Analysis_Request(void)
  99          {
 100   1        uint8_t Data_Check_OK;
 101   1        if(Receive_Buffer_Full_Flag)
 102   1        {
 103   2          Receive_Buffer_Full_Flag = 0;
 104   2          Analysis_Lock = 1;
 105   2          Data_Check_OK = Data_Check();
 106   2          if(!Data_Check_OK)
 107   2          {   
 108   3            Data_Check_OK = 1;  
 109   3            switch(Receive_Buff[0]){
 110   4              case FUN_No1 : No1_Fun();break;
 111   4              case FUN_No2 : No2_Fun();break;//Get_Flash_Times_Level
 112   4              //case FUN_No6 : No6_Fun();break;
 113   4              //case FUN_No7 : No7_Fun();break;
 114   4              //case FUN_No8 : No8_Fun();break;
 115   4              case FUN_No11: No11_Fun();break;/* Get Lamp Type */
 116   4              //case FUN_No12: No12_Fun();break;
C51 COMPILER V9.56.0.0   PROTOCOL                                                          02/01/2018 16:07:19 PAGE 3   

 117   4              //case FUN_No13: No13_Fun();break;
 118   4              //case FUN_No14: No14_Fun();break;  /* skin type */
 119   4              case FUN_No15: No15_Fun();break;
 120   4              default : break;
 121   4            }
 122   3          }
 123   2          Analysis_Lock = 0;
 124   2        }
 125   1      }
 126          
 127          void No1_Fun(void)    /* get flash times */
 128          {
 129   1        uint8_t temp[4];
 130   1        temp[0] = (uint8_t)Flash_Times;
 131   1        temp[1] = (uint8_t)(Flash_Times>>8);
 132   1        temp[2] = (uint8_t)(Flash_Times>>16);
 133   1        temp[3] = (uint8_t)(Flash_Times>>24);
 134   1        Send_Data(&temp,4);
 135   1      }
 136          
 137          
 138          void No2_Fun(void)   /* get flash times level */
 139          {
 140   1        Send_Data(&Flash_Times_Level,1);
 141   1      }
 142          /*
 143          void No3_Fun(void)   /* get skin color level */
 144          /*{
 145            Send_Data(&Skin_Color_Level,1);
 146          }
 147          */
 148          
 149          
 150          /*void No6_Fun(void)   /* get ERROR flag */
 151          /*{
 152            Send_Data(&Error_Flag,1);
 153          }*/
 154          /*
 155          void No7_Fun(void)   /* Full Charge flag */
 156          /*{
 157            Full_Charge_Flag = Receive_Buff[2]; 
 158          }*/
 159          /*
 160          void No8_Fun(void)  /* Mode Type */
 161          /*{
 162            Mode_Type = Receive_Buff[2];
 163          }*/
 164          
 165          void No11_Fun(void)  /* Get Lamp Type */
 166          {
 167   1        Send_Data(&Lamp_Type,1);
 168   1      }
 169          /*
 170          void No12_Fun(void)  /* get Mode Type */
 171          /*{
 172            Send_Data(&Mode_Type,1);
 173          }*/
 174          
 175          /*void No13_Fun(void)  /* Lock Flag */
 176          /*{
 177            Lock_Flag = Receive_Buff[2];
 178          }*/
C51 COMPILER V9.56.0.0   PROTOCOL                                                          02/01/2018 16:07:19 PAGE 4   

 179           /*
 180          void No14_Fun(void)  /* skin type */
 181          /*{
 182            Send_Data(&Skin_Tpye,1);
 183          }*/
 184          
 185          void No15_Fun(void)  /*all */
 186          {
 187   1        uint8_t da[6];
 188   1        Lock_Flag = Receive_Buff[2];
 189   1        Full_Charge_Flag = Receive_Buff[3];
 190   1        Mode_Type = Receive_Buff[4];
 191   1        Flash_Ready = Receive_Buff[5];
 192   1        Flash_Level = Receive_Buff[6];
 193   1        if(Full_Charge_Flag)
 194   1        {
 195   2          if(!(No_Skin_Flag))
 196   2          {
 197   3            Full_Charge_LED_Off;
 198   3          }else{
 199   3            Full_Charge_LED_On;
 200   3          }     
 201   2        }else{
 202   2          Full_Charge_LED_Off;
 203   2        }
 204   1        da[0] = Error_Flag;
 205   1        da[1] = Skin_Tpye;
 206   1        da[2] = Mode_Type;
 207   1        da[3] = Flash_Flag;
 208   1        da[4] = Flash_Times_Level;
 209   1        da[5] = Low_Lamp;
 210   1        Send_Data(&da,6);
 211   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    416    ----
   CONSTANT SIZE    =    256    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4      26
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
